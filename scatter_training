import numpy as np
from mesh_utils import import_mesh
from plot_utils import plot_scatter_yield
import os
import glob
from tqdm import tqdm
import pyarrow.parquet as pq
import constants

def load_data(dir: str, ftype: str):

    DIR = os.path.join(dir,'processed')
    
    files = glob.glob(os.path.join(DIR, f'*.{ftype}'))
    
    df_list = [pq.ParquetDataset(file).read_pandas().to_pandas() for file in tqdm(files, desc='Importing dataset files',bar_format=constants.FORMAT_PBAR)]

    return df_list

TRIAL_DIR = 'data/training_multi/crux-new'

NODES, CONNECT = import_mesh(TRIAL_DIR)

df_list = load_data(dir=TRIAL_DIR, ftype='parquet')

filter_list = []

for df in df_list:
    # Number of time steps and number of elements
    n_tps = len(list(set(df['t'])))
    n_elems = len(list(set(df['id'])))

    idx = np.random.randint(0, n_tps-1, 75)
    idx = np.concatenate([idx,[n_tps-1]])

    stress = df[['sxx_t','syy_t','sxy_t']].values.reshape(n_tps,n_elems,-1)[idx]
    strain = df[['exx_t','eyy_t','exy_t']].values.reshape(n_tps,n_elems,-1)[idx]
    peeq = df['peeq'].values.reshape(n_tps, n_elems,-1)[idx]

    filter_list.append(np.concatenate([stress.reshape(-1,3),strain.reshape(-1,3),peeq.reshape(-1,1)],axis=1))

data = np.vstack(filter_list)

plot_scatter_yield(data[:,:3].reshape(len(idx),-1,3), data[:,3:6].reshape(len(idx),-1,3), data[:,-1].reshape(len(idx),-1,1), dir=TRIAL_DIR, test='x05_y05_', nodes=NODES, connectivity=CONNECT, t_domain=True)